
http://stackoverflow.com/questions/25229880/how-to-send-enclose-data-in-delete-request-in-jersey-client
================
For instance: If a GET /customers/4711 returns one customer and you send a DELETE /customers/4711 the next GET on this resource should return a 404. You deleted a resource identified by a URL like defined in the spec.

Your URL /store/remove/from/group does not seem to identify a resource. Using identifiers like /store/4711 or /groups/4711 and sending a DELETE on them would not fit your needs because you want to "remove a store from a group" not delete a store or a group.

Assuming you have a group resource

{
  "id" : 4711,
  "stores" : [123, 456, 789]
}
and you want a result like

{
  "id" : 4711,
  "stores" : [123, 789]
}
you are not deleting anything. You are modifying a resource so PUT, POST or PATCH are appropiate methods. JSON-Patch is a good format for describing such changes. A request would look like this:

PATCH /groups/4711 HTTP/1.1
Content-Type: application/json-patch

[
  {
    "op" : "remove"
    "path" : "stores/1"
  }
]

http://stackoverflow.com/questions/6203231/which-http-methods-match-up-to-which-crud-methods
Create = PUT with a new URI
         POST to a base URI returning a newly created URI
Read   = GET
Update = PUT with an existing URI
Delete = DELETE
PUT can map to both Create and Update depending on the existence of the URI used with the PUT.

POST maps to Create.
Correction: POST can also map to Update although it's typically used for Create. POST can also be a partial update so we don't need the proposed PATCH method.

+1: The distinction you make between PUT to create resources whose names (URIs) are assigned by the client 
and POST to create resources whose names are assigned by the server is important. 
See Richardson and Ruby's Restful Web Services (O'Reilly) for a discussion on it
==============================================
http://stackoverflow.com/questions/630453/put-vs-post-in-rest

According to the HTTP/1.1 Spec:

The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line
In other words, POST is used to create.

The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI."
That is, PUT is used to create or update.

So, which one should be used to create a resource? Or one needs to support both?



Both PUT and POST can be used for creating.

You have to ask "what are you performing the action to?" to distinguish what you should be using. Let's assume you're designing an API for asking questions. If you want to use POST then you would do that to a list of questions. If you want to use PUT then you would do that to a particular question.

Great both can be used, so which one should I use in my RESTful design:

You do not need to support both PUT and POST.

Which is used is left up to you. But just remember to use the right one depending on what object you are referencing in the request.

Some considerations:

Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.
PUT is idempotent, so if you PUT an object twice, it has no effect. This is a nice property, so I would use PUT when possible.
You can update or create a resource with PUT with the same object URL
With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.
An example:

I wrote the following as part of another answer on SO regarding this:

POST:

Used to modify and update a resource

POST /questions/<existing_question> HTTP/1.1
Host: wahteverblahblah.com
Note that the following is an error:

POST /questions/<new_question> HTTP/1.1
Host: wahteverblahblah.com
If the URL is not yet created, you should not be using POST to create it while specifying the name. This should result in a 'resource not found' error because <new_question> does not exist yet. You should PUT the <new_question> resource on the server first.

You could though do something like this to create a resources using POST:

POST /questions HTTP/1.1
Host: wahteverblahblah.com
Note that in this case the resource name is not specified, the new objects URL path would be returned to you.

PUT:

Used to create a resource, or overwrite it. While you specify the resources new URL.

For a new resource:

PUT /questions/<new_question> HTTP/1.1
Host: wahteverblahblah.com
To overwrite an existing resource:

PUT /questions/<existing_question> HTTP/1.1
Host: wahteverblahblah.com

====================
http://stackoverflow.com/questions/12709999/restful-webservices-put-or-post-for-a-updating


DEFINITIONS

http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5
